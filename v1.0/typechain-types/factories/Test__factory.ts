/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Test, TestInterface } from "../Test";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "targetTest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002b67e7502cc71e89a51d60c01b6100c560201b60201c565b61004567f2baf1e39187e15260c01b6100c560201b60201c565b6103e86014600a604051610058906100c8565b6100649392919061019a565b604051809103906000f080158015610080573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101d1565b50565b610bc9806103a783390190565b6000819050919050565b6000819050919050565b6000819050919050565b600061010e610109610104846100d5565b6100e9565b6100df565b9050919050565b61011e816100f3565b82525050565b6000819050919050565b600061014961014461013f84610124565b6100e9565b6100df565b9050919050565b6101598161012e565b82525050565b6000819050919050565b600061018461017f61017a8461015f565b6100e9565b6100df565b9050919050565b61019481610169565b82525050565b60006060820190506101af6000830186610115565b6101bc6020830185610150565b6101c9604083018461018b565b949350505050565b6101c7806101e06000396000f3fe60806040526004361061001e5760003560e01c8063c097a09014610023575b600080fd5b61002b61002d565b005b61004167ddccedd74e0b9fb360c01b6100fe565b610055677d2eaa3d6486b2b860c01b6100fe565b61006967be4396e5731355f760c01b6100fe565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631998aeef346040518263ffffffff1660e01b815260040160206040518083038185885af11580156100d6573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906100fb9190610164565b50565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061013182610106565b9050919050565b61014181610126565b811461014c57600080fd5b50565b60008151905061015e81610138565b92915050565b60006020828403121561017a57610179610101565b5b60006101888482850161014f565b9150509291505056fea26469706673582212202e4b1d8033da28cb478c77544a5fb591d8293925de42a89fd5beabc724a93dd964736f6c6343000812003360806040526001600660006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162000bc938038062000bc98339818101604052810190620000529190620001bc565b6200006e673e2bc8f3faf82db660c01b6200017960201b60201c565b6200008a67dbfeaac4466875fa60c01b6200017960201b60201c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000e667c39a9f15904b8d1d60c01b6200017960201b60201c565b8082620000f4919062000247565b8362000101919062000292565b6001819055506200012367cb51b2fda93008ec60c01b6200017960201b60201c565b436002819055506200014667dc28e5255ee4d55360c01b6200017960201b60201c565b8060048190555062000169675c6c89b87327e37160c01b6200017960201b60201c565b81600581905550505050620002cd565b50565b600080fd5b6000819050919050565b620001968162000181565b8114620001a257600080fd5b50565b600081519050620001b6816200018b565b92915050565b600080600060608486031215620001d857620001d76200017c565b5b6000620001e886828701620001a5565b9350506020620001fb86828701620001a5565b92505060406200020e86828701620001a5565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620002548262000181565b9150620002618362000181565b9250828202620002718162000181565b915082820484148315176200028b576200028a62000218565b5b5092915050565b60006200029f8262000181565b9150620002ac8362000181565b9250828201905080821115620002c757620002c662000218565b5b92915050565b6108ec80620002dd6000396000f3fe6080604052600436106100555760003560e01c80631998aeef1461005a5780631d0806ae146100785780638da5cb5b146100a35780639d1b464a146100ce578063d91c98d3146100f9578063fdba6a2c14610124575b600080fd5b61006261014f565b60405161006f91906105b5565b60405180910390f35b34801561008457600080fd5b5061008d610528565b60405161009a91906105e9565b60405180910390f35b3480156100af57600080fd5b506100b861052e565b6040516100c59190610625565b60405180910390f35b3480156100da57600080fd5b506100e3610552565b6040516100f091906105e9565b60405180910390f35b34801561010557600080fd5b5061010e610558565b60405161011b91906105e9565b60405180910390f35b34801561013057600080fd5b5061013961055e565b604051610146919061065b565b60405180910390f35b6000610165673e1c635ea87b346860c01b610571565b61017967f040a142a46ab81160c01b610571565b61018d6718f807d315df2a0660c01b610571565b600660009054906101000a900460ff16156101fb576101b667c6d62532cd0a91b160c01b610571565b6101ca67d35a4be0e362bdc160c01b610571565b600554600254436101db91906106a5565b1115600660006101000a81548160ff021916908315150217905550610210565b61020f67903d9d2c014ba57660c01b610571565b5b6102246705a51e03bea53c0860c01b610571565b6102386706e6e7129a94019860c01b610571565b61024c67992e8cad83ec9e8860c01b610571565b600660009054906101000a900460ff1661029b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029290610736565b60405180910390fd5b6102af674511040b70ce558d60c01b610571565b6102c36721765e6ecc5325fd60c01b610571565b600454600254436102d491906106a5565b6102de9190610756565b6001546102eb91906106a5565b60038190555061030567ac589f947fd3a2be60c01b610571565b61031866243c5bd0d550ea60c01b610571565b61032c675335916fe2c786ca60c01b610571565b600354341015610371576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610368906107e4565b60405180910390fd5b610385676c171f624111ecb160c01b610571565b61039967e76b00e1a619e10760c01b610571565b6103ad678a8c84b2e552e39b60c01b610571565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16346040516103f490610835565b60006040518083038185875af1925050503d8060008114610431576040519150601f19603f3d011682016040523d82523d6000602084013e610436565b606091505b5050905061044e675f5e79984d53a8ec60c01b610571565b61046267db115e87678c9de360c01b610571565b61047667e7a0b14fa99399ef60c01b610571565b806104b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ad90610896565b60405180910390fd5b6104ca672c418c9eb5b68d5260c01b610571565b6104de67251fe5a928875f5560c01b610571565b6000600660006101000a81548160ff02191690831515021790555061050d6765fd936cca6ee33460c01b610571565b6105216768a91f3bdcd08d7060c01b610571565b3391505090565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60025481565b600660009054906101000a900460ff1681565b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061059f82610574565b9050919050565b6105af81610594565b82525050565b60006020820190506105ca60008301846105a6565b92915050565b6000819050919050565b6105e3816105d0565b82525050565b60006020820190506105fe60008301846105da565b92915050565b600061060f82610574565b9050919050565b61061f81610604565b82525050565b600060208201905061063a6000830184610616565b92915050565b60008115159050919050565b61065581610640565b82525050565b6000602082019050610670600083018461064c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106b0826105d0565b91506106bb836105d0565b92508282039050818111156106d3576106d2610676565b5b92915050565b600082825260208201905092915050565b7f41756374696f6e20636c6f736564000000000000000000000000000000000000600082015250565b6000610720600e836106d9565b915061072b826106ea565b602082019050919050565b6000602082019050818103600083015261074f81610713565b9050919050565b6000610761826105d0565b915061076c836105d0565b925082820261077a816105d0565b9150828204841483151761079157610790610676565b5b5092915050565b7f62696420746f6f206c6f77000000000000000000000000000000000000000000600082015250565b60006107ce600b836106d9565b91506107d982610798565b602082019050919050565b600060208201905081810360008301526107fd816107c1565b9050919050565b600081905092915050565b50565b600061081f600083610804565b915061082a8261080f565b600082019050919050565b600061084082610812565b9150819050919050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610880600f836106d9565b915061088b8261084a565b602082019050919050565b600060208201905081810360008301526108af81610873565b905091905056fea2646970667358221220bbecfaad2e0865ce7e4794a86689d90f58e854b8585360eb6f9db7898dfba49864736f6c63430008120033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test {
    return super.attach(address) as Test;
  }
  override connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}
